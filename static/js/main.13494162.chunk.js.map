{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","animationDuration","infinite","useState","currentImage","setCurrentImage","maxImagesPosition","length","isDisabledPrev","isDisabledNext","className","style","width","height","transition","map","image","index","transform","src","alt","type","onClick","prev","Math","max","disabled","min","App","inputs","setInputs","getMaxFrames","floor","handleInput","event","value","target","name","checked","prevState","action","htmlFor","id","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13494162.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  const [currentImage, setCurrentImage] = useState(0);\n  const maxImagesPosition = images.length - frameSize;\n  const isDisabledPrev = currentImage === 0 && !infinite;\n  const isDisabledNext = currentImage === maxImagesPosition\n  && !infinite;\n\n  const handlePrev = () => (\n    currentImage !== 0\n      ? setCurrentImage(prev => Math.max(prev - step, 0))\n      : setCurrentImage(maxImagesPosition)\n  );\n\n  const handleNext = () => (\n    currentImage !== maxImagesPosition\n      ? setCurrentImage(prev => Math.min(prev + step, maxImagesPosition))\n      : setCurrentImage(0)\n  );\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__container\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n          height: `${itemWidth}px`,\n          transition: `${animationDuration}ms`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transition: `${animationDuration}ms`,\n          }}\n        >\n          {images.map((image, index) => (\n            <li\n              className=\"Carousel__item\"\n              key={image}\n              style={{\n                transform: `translateX(-${itemWidth * currentImage}px)`,\n                transition: `${animationDuration}ms`,\n              }}\n            >\n              <img\n                className=\"Carousel__img\"\n                src={image}\n                alt={`Smile â„– ${index + 1}`}\n                width={itemWidth}\n                height={itemWidth}\n              />\n            </li>\n          ))}\n\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          className=\"Carousel__button Carousel__button--active\"\n          type=\"button\"\n          onClick={handlePrev}\n          disabled={isDisabledPrev}\n        >\n          {'<<'}\n        </button>\n        <button\n          className=\"Carousel__button Carousel__button--active\"\n          type=\"button\"\n          onClick={handleNext}\n          disabled={isDisabledNext}\n          data-cy=\"next\"\n        >\n          {'>>'}\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  const [inputs, setInputs] = useState({\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  });\n\n  const getMaxFrames = Math.floor(1300 / inputs.itemWidth);\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const value = event.target.name === 'infinite'\n      ? event.target.checked\n      : event.target.value;\n\n    setInputs(prevState => ({\n      ...prevState,\n      [event.target.name]: value,\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n      <form className=\"App__form\" action=\"/\">\n        <label htmlFor=\"itemId\" className=\"App__label\">\n          Box Width:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            id=\"itemId\"\n            name=\"itemWidth\"\n            min={130}\n            max={390}\n            step={20}\n            value={inputs.itemWidth}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\" className=\"App__label\">\n          Frame Size:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            name=\"frameSize\"\n            id=\"frameId\"\n            min={1}\n            max={getMaxFrames}\n            step={1}\n            value={inputs.frameSize}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\" className=\"App__label\">\n          Step:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            name=\"step\"\n            id=\"stepId\"\n            min={1}\n            max={10}\n            step={1}\n            value={inputs.step}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label htmlFor=\"animationId\" className=\"App__label\">\n          Animation Duration:\n          <input\n            className=\"App__input\"\n            type=\"number\"\n            name=\"animationDuration\"\n            id=\"animationId\"\n            min={500}\n            max={5000}\n            step={500}\n            value={inputs.animationDuration}\n            onChange={handleInput}\n          />\n        </label>\n\n        <label htmlFor=\"infiniteId\" className=\"App__label\">\n          Infinite:\n          <input\n            className=\"App__input App__bigInpute\"\n            type=\"checkbox\"\n            name=\"infinite\"\n            id=\"infiniteId\"\n            value={inputs.animationDuration}\n            onChange={handleInput}\n          />\n        </label>\n      </form>\n\n      <Carousel\n        images={images}\n        itemWidth={inputs.itemWidth}\n        frameSize={inputs.frameSize}\n        step={inputs.step}\n        animationDuration={inputs.animationDuration}\n        infinite={inputs.infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}